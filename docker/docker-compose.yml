version: '3'
services:
    crawler:
        image: "crawler_docker"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
          - ./back.env
        build:
            context: crawler_docker
            dockerfile: dockerfile

    parser:
        image: "parser_docker"
        networks: 
            - "messages"
            - "database"
        deploy:
            mode: replicated #use global to only have one instance per node
            replicas: 2
            placement:
                constraints:
                  - "node.role==worker"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
          - ./back.env
        build:
            context: parser_docker
            dockerfile: dockerfile
        restart: 
            always

    hacker:
        image: "hacker_docker"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
            - crawler
        env_file:
          - ./back.env
        volumes:
            - ./volumes/dict:/dict
        build:
            context: hacker_docker
            dockerfile: dockerfile
        restart: 
            always
    
    compiler:
        image: "compiler_docker"
        networks:
           - "database"
        depends_on:
           - db_dict
        env_file:
          - ./back.env
        volumes:
            - ./volumes/dict:/dict
        build:
           context: compiler_docker
           dockerfile: dockerfile   

    db_dict:
        image: "db_dict_docker"
        networks: 
            - "database"
        build:
            context: db_dict_docker
            dockerfile: dockerfile
        env_file:
          - ./back.env
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: "crack_it"
        volumes:
            - ./volumes/db_dict:/var/lib/mysql"
        restart: 
            always

    rabbitmq:
        image: "rabbitmq"
        networks: 
            - "messages"
        restart: 
            always

    nginx:
        image: "nginx"
        ports:
            - "8080:80"
        volumes:
            - ./volumes/web:/var/www/html
            - ./nginx_docker:/etc/nginx/conf.d #Exception ! Allow us to avoid another dockerfile
        links:
            - php
        networks: 
            - "web"
        restart: 
            always

    php:
        image: "php"
        build:
            context: php_docker
            dockerfile: dockerfile
        volumes:
            - ./volumes/web:/var/www/html
        depends_on:
            - db_dict
            - db_web
        networks: 
            - "database"
            - "web"
        restart: 
            always

    db_web:
        image: "db_web_docker"
        networks: 
            - "database"
        build:
            context: db_web_docker
            dockerfile: dockerfile
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: "web"
            MYSQL_USER: "databaseweb"
            MYSQL_PASSWORD: "databaseweb_passwd"
        volumes:
            - ./volumes/db_web:/var/lib/mysql"
        restart: 
            always
            
networks:
    messages:
    database:
    web:

volumes:
    web:
    db_dict:
    db_web:
    dict:
