version: '3'
services:
    crawler:
        image: "crawler"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        build:
            context: crawler
            dockerfile: dockerfile
        volumes: 
            - "sharedTmpFileQueue:/sharedTmp"
            - "sourceFileCache:/cache"

    fetcher:
        image: "hashfetcher"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        build:
            context: hashfetcher
            dockerfile: dockerfile

    parser:
        image: "parser"
        networks: 
            - "messages"
            - "database"
        deploy:
            mode: replicated #use global to only have one instance per node
            replicas: 2
            placement:
                constraints:
                  - "node.role==worker"
        volumes: 
            - "sharedTmpFileQueue:/sharedTmp"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        build:
            context: parser
            dockerfile: dockerfile
        restart: 
            always

    hacker:
        image: "hacker"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        volumes:
            - ./volumes/dict:/dict
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"
        build:
            context: hacker
            dockerfile: dockerfile
        restart: 
            always
    
    compiler:
        image: "compiler"
        networks:
           - "database"
        depends_on:
           - db_dict
        env_file:
            - ./back.env
        volumes:
            - ./volumes/dict:/dict
        build:
           context: compiler
           dockerfile: dockerfile   

    db_dict:
        image: "db_dict"
        networks: 
            - "database"
        build:
            context: db_dict
            dockerfile: dockerfile
        env_file:
            - ./back.env
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: "crack_it"
        volumes:
            - ./volumes/db_dict:/var/lib/mysql"
        restart: 
            always

    rabbitmq:
        image: "rabbitmq"
        networks: 
            - "messages"
        restart: 
            always

    nginx:
        image: "nginx"
        ports:
            - "80:80"
        volumes:
            - ./volumes/web:/var/www/html
            - ./nginx:/etc/nginx/conf.d #Exception ! Allow us to avoid another dockerfile
        depends_on:
            - statsserver
        networks: 
            - "web"
        restart: 
            always

    statsserver:
        image: "statsserver"
        networks: 
            - "database"
            - "web"
        depends_on:
            - db_dict
        env_file:
            - ./back.env
        build:
            context: statsserver
            dockerfile: dockerfile
        volumes: 
            - ./volumes/dict:/dict
      
networks:
    messages:
    database:
    web:

volumes:
    sharedTmpFileQueue:
    sourceFileCache:
#    db_dict:
#    dict: