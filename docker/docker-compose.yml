version: '3'
services:
    crawler:
        image: "crawler"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        build:
            context: crawler
            dockerfile: dockerfile
        volumes: 
            - "sharedTmpFileQueue:/sharedTmp"
            - "sourceFileCache:/cache"
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"

    fetcher:
        image: "hashfetcher"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        build:
            context: hashfetcher
            dockerfile: dockerfile
        volumes:
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"

    parser:
        image: "parser"
        networks: 
            - "messages"
            - "database"
        volumes: 
            - "sharedTmpFileQueue:/sharedTmp"
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        environment:
            "PYTHONUNBUFFERED": "0"
        build:
            context: parser
            dockerfile: dockerfile
        restart: 
            always

    cracker:
        image: "cracker"
        networks: 
            - "messages"
            - "database"
        depends_on:
            - db_dict
            - rabbitmq
        env_file:
            - ./back.env
        environment:
            "PYTHONUNBUFFERED": "0"
        volumes:
            - "./volumes/dict:/dict"
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"
        build:
            context: cracker
            dockerfile: dockerfile
        restart: 
            always
    
    compiler:
        image: "compiler"
        networks:
           - "database"
        depends_on:
           - db_dict
        env_file:
            - ./back.env
        volumes:
            - "./volumes/dict:/dict"
            - "./commons/python-mysqldb-reconnect/mysqldb.py:/code/mysqldb.py:ro"
        build:
           context: compiler
           dockerfile: dockerfile   

    db_dict:
        image: "db_dict"
        networks: 
            - "database"
        build:
            context: db_dict
            dockerfile: dockerfile
        env_file:
            - ./back.env
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: "crack_it"
        volumes:
            - "./volumes/db_dict:/var/lib/mysql"
        restart: 
            always

    #Temporary
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        networks: 
            - "database"
        environment:
          PMA_HOST: db_dict
          PMA_PORT: 3306
        restart: always
        ports:
            - 8080:80

    rabbitmq:
        image: "rabbitmq"
        networks: 
            - "messages"
        restart: 
            always

    nginx:
        image: staticfloat/nginx-certbot
        ports:
            - 80:80/tcp
            - 443:443/tcp
        environment:
            CERTBOT_EMAIL: webmaster@crack-it-project.tk #address is wrong.. I messed up
        volumes:
            - "letsencrypt:/etc/letsencrypt"
            - "./volumes/web:/var/www/html"
            - "./nginx:/etc/nginx/user.conf.d:ro"
        depends_on:
            - statsserver
        networks: 
            - "web"
        restart: 
            always

    statsserver:
        image: "statsserver"
        networks: 
            - "database"
            - "web"
        depends_on:
            - db_dict
        env_file:
            - ./back.env
        build:
            context: statsserver
            dockerfile: dockerfile
        volumes: 
            - "./volumes/dict:/dict"

networks:
    messages:
    database:
    web:

volumes:
    sharedTmpFileQueue:
    sourceFileCache:
    letsencrypt:
#    db_dict:
#    dict: